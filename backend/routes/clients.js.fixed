/**
 * Laapak Report System - Client Management Routes
 * Handles client CRUD operations and authentication
 */

const express = require('express');
const router = express.Router();
const { Client } = require('../models');
const auth = require('../middleware/auth');
const { check, validationResult } = require('express-validator');
const jwt = require('jsonwebtoken');
const config = require('../config/config');
const { Op } = require('sequelize');

// @route   GET api/clients
// @desc    Get all clients
// @access  Private (Admin only)
router.get('/', auth, async (req, res) => {
    try {
        // Check if user is admin
        if (!req.user.isAdmin) {
            return res.status(403).json({ message: 'غير مصرح لك بعرض بيانات العملاء' });
        }

        // Build filter query
        const whereClause = {};
        if (req.query.name) {
            whereClause.name = { [Op.like]: `%${req.query.name}%` };
        }
        if (req.query.status) {
            whereClause.status = req.query.status;
        }
        if (req.query.date) {
            const startDate = new Date(req.query.date);
            const endDate = new Date(req.query.date);
            endDate.setDate(endDate.getDate() + 1);
            whereClause.createdAt = { [Op.between]: [startDate, endDate] };
        }

        const clients = await Client.findAll({
            where: whereClause,
            order: [['createdAt', 'DESC']]
        });

        res.json({ clients });
    } catch (err) {
        console.error('Error fetching clients:', err.message);
        res.status(500).json({ message: 'خطأ في الخادم' });
    }
});

// @route   GET api/clients/:id
// @desc    Get client by ID
// @access  Private (Admin only)
router.get('/:id', auth, async (req, res) => {
    try {
        // Check if user is admin
        if (!req.user.isAdmin) {
            return res.status(403).json({ message: 'غير مصرح لك بعرض بيانات العملاء' });
        }

        const client = await Client.findByPk(req.params.id);
        
        if (!client) {
            return res.status(404).json({ message: 'العميل غير موجود' });
        }

        res.json({ client });
    } catch (err) {
        console.error('Error fetching client:', err.message);
        res.status(500).json({ message: 'خطأ في الخادم' });
    }
});

// @route   POST api/clients
// @desc    Create a new client
// @access  Private (Admin only)
router.post('/', [
    auth,
    [
        check('name', 'اسم العميل مطلوب').not().isEmpty(),
        check('phone', 'رقم الهاتف مطلوب').not().isEmpty(),
        check('orderCode', 'كود الطلب مطلوب').not().isEmpty(),
        check('email', 'البريد الإلكتروني غير صالح').optional().isEmail()
    ]
], async (req, res) => {
    // Check validation
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        // Check if user is admin
        if (!req.user.isAdmin) {
            return res.status(403).json({ message: 'غير مصرح لك بإضافة عملاء' });
        }

        const { name, phone, email, address, orderCode, status } = req.body;

        // Check if client with phone already exists
        let client = await Client.findOne({ where: { phone } });
        if (client) {
            return res.status(400).json({ message: 'يوجد عميل مسجل بهذا الرقم بالفعل' });
        }

        // Create new client
        client = await Client.create({
            name,
            phone,
            email: email || null,
            address: address || null,
            orderCode,
            status: status || 'active'
        });

        res.status(201).json({ client });
    } catch (err) {
        console.error('Error creating client:', err.message);
        res.status(500).json({ message: 'خطأ في الخادم' });
    }
});

// @route   PUT api/clients/:id
// @desc    Update a client
// @access  Private (Admin only)
router.put('/:id', auth, async (req, res) => {
    try {
        // Check if user is admin
        if (!req.user.isAdmin) {
            return res.status(403).json({ message: 'غير مصرح لك بتعديل بيانات العملاء' });
        }

        const { name, phone, email, address, status } = req.body;
        
        // Find client
        let client = await Client.findByPk(req.params.id);
        if (!client) {
            return res.status(404).json({ message: 'العميل غير موجود' });
        }

        // Check if phone is being changed and already exists
        if (phone !== client.phone) {
            const existingClient = await Client.findOne({ where: { phone } });
            if (existingClient) {
                return res.status(400).json({ message: 'يوجد عميل آخر مسجل بهذا الرقم بالفعل' });
            }
        }

        // Update client
        await client.update({
            name: name || client.name,
            phone: phone || client.phone,
            email: email !== undefined ? email : client.email,
            address: address !== undefined ? address : client.address,
            status: status || client.status
        });

        res.json({ client });
    } catch (err) {
        console.error('Error updating client:', err.message);
        res.status(500).json({ message: 'خطأ في الخادم' });
    }
});

// @route   DELETE api/clients/:id
// @desc    Delete a client
// @access  Private (Admin only)
router.delete('/:id', auth, async (req, res) => {
    try {
        // Check if user is admin
        if (!req.user.isAdmin) {
            return res.status(403).json({ message: 'غير مصرح لك بحذف العملاء' });
        }

        // Find client
        const client = await Client.findByPk(req.params.id);
        if (!client) {
            return res.status(404).json({ message: 'العميل غير موجود' });
        }

        // Delete client
        await client.destroy();

        res.json({ message: 'تم حذف العميل بنجاح' });
    } catch (err) {
        console.error('Error deleting client:', err.message);
        res.status(500).json({ message: 'خطأ في الخادم' });
    }
});

// @route   POST api/clients/auth
// @desc    Authenticate client & get token
// @access  Public
router.post('/auth', [
    check('phone', 'رقم الهاتف مطلوب').not().isEmpty(),
    check('orderCode', 'كود الطلب مطلوب').not().isEmpty()
], async (req, res) => {
    // Check validation
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { phone, orderCode } = req.body;

    try {
        // Find client by phone
        const client = await Client.findOne({ where: { phone } });
        if (!client) {
            return res.status(400).json({ message: 'بيانات الدخول غير صحيحة' });
        }

        // Check order code
        if (client.orderCode !== orderCode) {
            return res.status(400).json({ message: 'بيانات الدخول غير صحيحة' });
        }

        // Update last login
        await client.update({ lastLogin: new Date() });

        // Create JWT payload
        const payload = {
            user: {
                id: client.id,
                isClient: true,
                isAdmin: false
            }
        };

        // Sign token
        jwt.sign(
            payload,
            config.jwtSecret,
            { expiresIn: '1d' },
            (err, token) => {
                if (err) throw err;
                res.json({
                    token,
                    client: {
                        id: client.id,
                        name: client.name,
                        phone: client.phone,
                        email: client.email
                    }
                });
            }
        );
    } catch (err) {
        console.error('Error authenticating client:', err.message);
        res.status(500).json({ message: 'خطأ في الخادم' });
    }
});

module.exports = router;
